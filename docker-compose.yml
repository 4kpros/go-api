services:

  redis:
    container_name: redis
    image: redis:alpine
    restart: on-failure
    environment:
      SSL_MODE: "no"
      REDIS_PASSWORD: ${REDIS_PASSWORD:-""}
      REDIS_SAVE: ${REDIS_SAVE_IN_SECONDS:-3600}
      REDIS_DB: ${REDIS_DB:-0}
    ports:
      - ${REDIS_PORT:-6379}:6379
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - internal-network
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 10s
      timeout: 5s
      retries: 3
  
  postgres:
    container_name: postgres
    image: postgres:alpine
    restart: on-failure
    environment:
      SSL_MODE: ${SSL_MODE:-no} # no, yes
      POSTGRES_USER: ${POSTGRES_USERNAME}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DATABASE}
      PGDATA: /var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT:-5432}:5432
    volumes:
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - postgres-data:/var/lib/postgresql/data
    networks:
      - internal-network

  api:
    container_name: api
    build:
      context: .
      target: api
      dockerfile: ./docker/api/Dockerfile
    restart: on-failure
    environment:
      SSL_MODE: ${SSL_MODE:-no} # no, yes
      GIN_MODE: ${GIN_MODE:-debug} # debug, release
      VAULT_ADDR: ${VAULT_ADDR:-""}
      VAULT_TOKEN: ${VAULT_TOKEN:-""}
    depends_on:
      - postgres
    ports:
      - ${API_PORT:-3100}:3100
    networks:
      - internal-network

networks:
  internal-network:
    name: go-network
    driver: bridge

volumes:
  vault-data:
  redis-data:
  postgres-data:
